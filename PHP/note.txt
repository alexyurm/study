-   Regular Expressions:

    Regular expression in php

    Simple regex

    Regex quick reference
    [abc]     A single character: a, b or c
    [^abc]     Any single character but a, b, or c
    [a-z]     Any single character in the range a-z
    [a-zA-Z]     Any single character in the range a-z or A-Z
    ^     Start of line
    $     End of line
    \A     Start of string
    \z     End of string
    .     Any single character
    \s     Any whitespace character
    \S     Any non-whitespace character
    \d     Any digit
    \D     Any non-digit
    \w     Any word character (letter, number, underscore)
    \W     Any non-word character
    \b     Any word boundary character
    (...)     Capture everything enclosed
    (a|b)     a or b
    a?     Zero or one of a
    a*     Zero or more of a
    a+     One or more of a
    a{3}     Exactly 3 of a
    a{3,}     3 or more of a
    a{3,6}     Between 3 and 6 of a

    options: i case insensitive m make dot match newlines x ignore whitespace in regex o perform #{...} substitutions only once

-   Built-in global variables/arrays

    _SERVER[]
    _POST[]
    _SESSION[]

-   Built-in global functions

    -   empty() ->

        Determine whether a variable is considered to be empty. A variable is considered empty if it does not exist or if its value equals FALSE. 
        empty() does not generate a warning if the variable does not exist.

    -   die()

    -   mysqli_errno() -> Returns the error code for the most recent function call. It returns an int.

    -   mysqli_error() -> Returns a string description of the last error. It returns a string.

    -   mysqli_fetch_array -> Fetch a result row as an associative, a numeric array, or both

    -   crypt â€” One-way string hashing. The whole format of this function is: string crypt ( string $str [, string $salt ] ).
            crypt() will return a hashed string using the standard Unix DES-based algorithm or alternative algorithms 
            that may be available on the system. The salt parameter is optional. However, crypt() creates weak password 
            without salt. PHP 5.6 or later raise E_NOTICE error without it. Make sure specify strong enough salt for better security.

    -   get_magic_quotes_gpc()

    -   stripslashes() -> Un-quotes quoted string. The function stripslashes is used to remove backslashes from data. One use for this 
                      function, is to display data to which addslashes has been applied. What this means is that stripslashes would change I\'m hungry into I'm hungry.

    -   mysqli_real_escape_string() ->  Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection. The
                                    Procedural style of this function is: string mysqli_real_escape_string ( mysqli $link , string $escapestr )

                                    Parameters: 1) link: Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()
                                                2) escapestr: The string to be escaped. Characters encoded are NUL (ASCII 0), \n, \r, \, ', ", and Control-Z.

    -   urldecode -> 

    -   header(); -> Send a GET request

    -   mysqli_fetch_array ->   The mysql_fetch_array( ) and mysqli_fetch_array( ) functions retrieve result rows
                                from queries that produce output. These functions are typically used to retrieve the
                                results output by an SQL SELECT statement.

        You can access elements returned with mysqli_fetch_array( ) using either numeric or associative access.
        
        Example 1: Use numeric method to access elements in mysql table.
        
        ...
        if (!($result = @ mysql_query("SELECT * FROM artist", $connection)))
        die("Couldn't run query");

        $len = @mysqli_num_fields($result);
        
        while ($row = @ mysql_fetch_array($result))
        {
            print "\n";
            // Print out the columns
            for($x=0; $x<$len; $x++)
            print "{$row[$x]} ";
        }
        ...

        Example 2: Use associative to access elements in mysql table.

        Note: the function mysqli_num_fields returns the number of columns in the result.

        // Run the query on the connection
        if (!($result = @ mysql_query(
        "SELECT * FROM artist, album WHERE artist.artist_id = album.artist_id",
        $connection)))
        {
            die("Couldn't run query");
        }

        // Until there are no rows in the result set, fetch a row into
        // the $row array.
        while ($row = @ mysql_fetch_array($result))
        {
            print "\n";
            // Print out the columns
            print "{$row["artist_name"]} {$row["album_name"]}";
        }

    -   isset() -> Determine if a variable is set and is not NULL

        If a variable has been declared is NULL/empty string, isset() still returns TRUE.

        
-   Errors Handling in PHP
    
    PHP is configured through a php.ini configuration file that includes two important
    directives that affect error reporting: error_reporting and display_errors. The former
    controls what types of errors are trapped, and the latter controls whether error messages
    are reported.

-   Handling errors using the MySQLi library

    PHP provides error-reporting functions that provide the text error message and the
    numeric error code for a MySQL error that has occurred. Error numbers make it easier
    to look up information in the MySQL manual list of error codes and messages at http:
    //dev.mysql.com/doc/mysql/en/Error-handling.html

-   Using namespace: Alising/Importing

    The ability to refer to an external fully qualified name with an alias, or importing, is an important feature of namespaces. This is similar to the ability of 
    unix-based filesystems to create symbolic links to a file or to a directory.

Questions

1)  A very strange statement(??):

    echo " | <a href='edit.php'>Edit gifts</a>";

    What is that '|' mean here?

2)  PHP strings can be specified in 4 ways(!!):

    1)  Single quoted strings will display things almost completely "as is." Variables and most escape sequences will not be interpreted. The exception is that to 
        display a literal single quote, you can escape it with a back slash \', and to display a back slash, you can escape it with another backslash \\ (So yes, 
        even single quoted strings are parsed).

    2)  Double quote strings will display a host of escaped characters (including some regexes), and variables in the strings will be evaluated. An important point 
        here is that you can use curly braces to isolate the name of the variable you want evaluated. For example let's say you have the variable $type and you what 
        to echo "The $types are" That will look for the variable $types. To get around this use echo "The {$type}s are" You can put the left brace before or after 
        the dollar sign. Take a look at string parsing to see how to use array variables and such.

    3)  Heredoc string syntax works like double quoted strings. It starts with <<<. After this operator, an identifier is provided, then a newline. The string itself 
        follows, and then the same identifier again to close the quotation. You don't need to escape quotes in this syntax(??).

    4)  Nowdoc (since PHP 5.3.0) string syntax works essentially like single quoted strings. The difference is that not even single quotes or backslashes have to be 
        escaped. A nowdoc is identified with the same <<< sequence used for heredocs, but the identifier which follows is enclosed in single quotes, e.g. <<<'EOT'. 
        No parsing is done in nowdoc(??).

3)  A very strange usage of strlen

    
    strlen(
    $quantity.
    $description.
    $color.
    $shop.
    $price)
    
4)  when you declare a property within a class, you may assign a default value to it.
    The value you use must be a constant and not the result of a function or expression.
    Example 5-20 shows a few valid and invalid assignments.

    Example 5-20. Valid and invalid property declarations

    <?php
    class Test
    {
        public $name = "Paul Smith"; //Valid
        public $age = 42; //Valid
        public $time = time(); //Invalid - calls a function
        public $score = $level * 2; //Invalid - uses an expression
    }
    ?>

5)  difference between $this and self

    Use $this to refer to the current object. Use self to refer to the current class. 
    In other words, use  $this->member for non-static members, use self::$member for static members.

6)  Subclass constructors

    When you extend a class and declare your own constructor, you should be aware that
    PHP will not automatically call the constructor method of the parent class. To be certain
    that all initialization code is executed, subclasses should always call the parent con-
    structors,

    E.g.

    <?php
    $object = new Tiger();
    echo "Tigers have...<br>";
    echo "Fur: " . $object->fur . "<br />";
    echo "Stripes: " . $object->stripes;

    class Wildcat
    {
        public $fur; // Wildcats have fur
    }

    function __construct()
    {
        $this->fur = "TRUE";
    }

    class Tiger extends Wildcat
    {
        public $stripes; // Tigers have stripes
    }
    ?> 

    To verify that both
    constructors have been called, the program outputs the following:

    Tigers have...
    Fur: TRUE
    Stripes: TRUE

-   Arrays

    -   Numerically Indexed Arrays

        <?php
            $paper[] = "Copier";
            $paper[] = "Inkjet";
            $paper[] = "Laser";
            $paper[] = "Photo";

            print_r($paper);
        ?>

        So the output will be: 
        
        Array
        (
            [0] => Copier
            [1] => Inkjet
            [2] => Laser
            [3] => Photo
        )

    -   Associated Arrays

-   difference between die() and exit()

    They are the same.

-   How to enable the php parsing in Apache httpd:

    In most cases, we'll want to modify the way that Apache serves files when a directory is requested. Currently, 
    if a user requests a directory from the server, Apache will first look for a file called index.html. We want 
    to tell our web server to prefer PHP files, so we'll make Apache look for an index.php file first.

    To do this, type this command to open the dir.conf file in a text editor with root privileges:

    sudo vi /etc/apache2/mods-enabled/dir.conf

    The file will look like:

    <IfModule mod_dir.c>
        DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm
    </IfModule>

    We want to move the PHP index file highlighted above to the first position after the DirectoryIndex 
    specification, like this:

    <IfModule mod_dir.c>
        DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
    </IfModule>

    Save this file and restart httpd server:

    sudo service apache2 restart

-   A very interesting statement:

    
