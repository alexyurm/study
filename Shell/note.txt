Chapter 2 Getting Started

2.3 A simple script

$ who | wc -l

The | (pipe) symbol creates a pipeline between two programs: who's output becomes wc's input. The next step is to make this pipeline into a seperate command. You do this by entering the commands into a regular file, and then making the file executable, with chmod, like so:

$ cat > nusers          Create the file, copy the terminal input with cat
who | wc -l             Program text
$ chmod +x nusers
$ ./nusers
6

This shows the typical development cycle for small one- or two-line shell scripts.

2.4 Self Contained Scripts:

#!/bin/sh

When the first two characters of a file are #!, the kernel scans the rest of the file of the line for the full pathname of an intepreter to use to run the program. 
(Any intervening whitespace is skipped). The kernel also scans for a single option to be passed to that intepreter. 

The kernel also scans for a single option to be passed to that interpreter. E.g.

#!/bin/csh -f

2.5 Basic Shell Constructs

The shell recognizes three fundamental kinds of commands: 1) Built-in commands; 2) Shell functions; 3) External commands:

1) Built-in commands:

commands that the shell itself executes. Such as, cd, test(The test command is heavily used in shell scripting)...

2) Shell functions

Self-contained chunks of code.

3) External commands:

parent shell                                                parent shell
|                                                               ^
|                                                               |
|                                                               |
-------------> child shell ---------------------> new program----

2.5 Variables

double quotes aren't necessary around the value of one variable being used as the new value of a second variable. Using them though, doesn't hurt either and is necessary when
concatenating variables:

fullname="$first $second $last"   #Double quotes required here

2.5.5 Basic I/O Redirection

Many if not most, Unix programs follow this design. By default, they read standard input, write standard output, and send error messages to standard error. Such programs are
called filters, for reasons that will become clear shortly. The default for standard input, standard output, and standard error is the terminal.

The shell provides several syntactic notations for specifying how to change the default I/O sources and destinations.

1) Change the standard input with <

Use program < file to make program's standard input be file:

tr -d '\r' < dos-file.txt

2) Change standard output with >

Use program > file to make program's standard output to be file:

tr -d '\r' < does-file > unix-file.txt

Note: tr - translate or delete characters. It is used to translate, squeeze and/or delete characters from standard input, writing to standard output.

3) Append a file with >> 

Use program >> to send program's standard output to the end of a file. However, if it's already exists, instead of truncating the file, any new data generated
by the running program is appended to the end of the file.

for f in dos-file*.txt
do
    tr -d '\r' $f >> big-unix-file.txt
done

4) Create pipeline with |

so the it can hook together two or more running programs. E.g.

tr -d '\r' < dos-file.txt | sort > unix-file.txt

2.5.5.2 Special files: /dev/null and dev/tty

1) /dev/null 

It is often known as the "bit bucket". Data sent to this file is thrown away by the system. In other words, a program writting data to this file is always believes
that it has successfully written the data, but in practice, nothing is done with it.

if grep pattern myfile > /dev/null
then
    ... Pattern is here
else
    ... Pattern is not here
fi

In contrast to writes, reading from /dev/null always return end-of-file immediately. Reading from /dev/null is rare in shell programming, but it's important to know
how the file behaves.

2) /dev/tty

(??)When a program opens this file, Unix automatically redirects it to the real terminal (physical console or serial port, or pseudoterminal of network and windowed logins)
associated with the program. This is particularly useful for reading input that must come from a human, such as a password. It is also useful, although less so, for 
generating error messages.

printf "Enter new password: "   Prompt for input
stty -echo                      Turn off echoing of typed characters
read pass < /dev/tty            Read password
printf "Enter again: "          Prompt again
read pass2 < /dev/tty           Read again for verification
stty echo                       Don't forget to turn echoing back on

The stty (set tty) command controls various settings of your terminal (or window). The -echo option turns off the automatic printing (echoing) of every character you
type; stty echo restores it.

2.7 Simple Execution Tracing

This causes the shell to print out each command as it's executed, proceeded by "+" - that's a plus sign followed by a space.

Turn on tracing:  set -x
Turn off tracing: set +x

$cat > trace1.sh

#! /bin/sh
set -x          #Turn on tracing
echo 1st echo   #Do something
set +x
echo 2nd echo   #Do something else
^D              #Terminate with end-of-file

chmod +x tracr1.sh

$ ./trace1.sh

+ echo 1st echo
1st echo
+ set +x    Next traced line
2nd echo

2.8 Internationalization and Localization

1) Internationalization is the process of designing software so that it can be adapted for
specific user communities without having to change or recompile the code.

2) Localization is the process of adapting internationalized software for use by specific
user communities.


Chapter 3 Searching and Subsitutions

3.2 Regular Expressions

Two Posix BRE and ERE

BRE: Basic Regular Expression
ERE: Extended Regular Expression

Tools involved in Unix utilities:

grep
sed(the stream editor)
String processing language, such as awk, Icon, Perl, Python, Ruby, Tcl, and others.
File viewers(sometimes called pagers): more, page, and pg...

Regular expressions are so central to Unix use!! It pays to master them, and the earlier 
you do so, the better off you'll be.

Two basic components: 1) ordinary characters; 2) special characters(or metacharacters).

Remember the BRE and ERE special characters on the page 34.

3.2.1.1 Posix bracket 

-   The .(dot) character means "any single character". Thus a.c matches all of abc, aac, aqc and so on. It matches 
    any single character except NULL. Individual programs may also disallow matching newline.

    .* means "match any number of any character."
    . means any character.

-   ^ Match the following regular expression at the beginning of the line or string.
-   $ Match the following regular expression at the end of the line or string.
-   [...] Match any one of the enclosed characters.
-   \{n.m\} Match a range of occurrences of the single character that immediately precedes it.
    \{n\} matches exactly n occurrences, \{n,\} matches at least n occurrences, and \{n,m\} matches any number of occurrences
            between n and m. n and m must be between 0 and RE_DUP_MAX (minimum value:
            255), inclusive.

-   \( \) Save the pattern enclosed between \(and\) in a special holding space. Up to nine subpatterns can be saved on a single pattern.
    The text matched by the subpatterns can be reused later in the same pattern, by the escape sequences \1 to \9. for example, \(ab\).*1
    matches two occurences of ab, with any number of characters in between. (??)

-   \n  Replay the nth subpattern enclosed in \(and \) into the pattern at this point. n is a number from 1 to 9, with 1 starting on the left.

-   Just like BRE \{n,m} earlier, but without the backslaces in front of the braces.

-   + Match one or more instances of the preceding regular expression.

-   ? Match zero or one instances of the preceding regular expression.

-   | Match the regular expression specified before or after.

-   () Apply a match to the enclosed group of regular expressions.


-   Collating is the act of giving an ordering to some group of set of items. A POSIX collating elements of the
    name of the element in the current locale, enclosed by [. and .]]. The regular expression [ab[.ch.]de] matches
    any of the characters a, b, d, or e, or the pair ch. It does not match a standalone c or h character.(??)

3.2.1.1 Posix bracket expressions.

-   
