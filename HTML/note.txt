-   Method Definitions

    -   GET

    The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI. If the Request-URI refers to a data-producing 
    process, it is the produced data which shall be returned as the entity in the response and not the source text of the process, unless that text happens to be 
    the output of the process.

    -   HEAD

    The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response.

    -   POST

    The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI 
    in the Request-Line. POST is designed to allow a uniform method to cover the following functions:

      - Annotation of existing resources;
      - Posting a message to a bulletin board, newsgroup, mailing list,
        or similar group of articles;
      - Providing a block of data, such as the result of submitting a
        form, to a data-handling process;
      - Extending a database through an append operation. 

    -   PUT

    The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the 
    enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing 
    resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI. 
    If a new resource is created, the origin server MUST inform the user agent via the 201 (Created) response. If an existing resource is modified, either the 
    200 (OK) or 204 (No Content) response codes SHOULD be sent to indicate successful completion of the request. If the resource could not be created or modified 
    with the Request-URI, an appropriate error response SHOULD be given that reflects the nature of the problem. The recipient of the entity MUST NOT ignore any 
    Content-* (e.g. Content-Range) headers that it does not understand or implement and MUST return a 501 (Not Implemented) response in such cases.

    If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those entries SHOULD be treated as stale. 
    Responses to this method are not cacheable.

    The fundamental difference between the POST and PUT requests is reflected in the different meaning of the Request-URI. The URI in a POST request identifies 
    the resource that will handle the enclosed entity. That resource might be a data-accepting process, a gateway to some other protocol, or a separate entity 
    that accepts annotations. In contrast, the URI in a PUT request identifies the entity enclosed with the request -- the user agent knows what URI is intended 
    and the server MUST NOT attempt to apply the request to some other resource. If the server desires that the request be applied to a different URI,

    it MUST send a 301 (Moved Permanently) response; the user agent MAY then make its own decision regarding whether or not to redirect the request.

    A single resource MAY be identified by many different URIs. For example, an article might have a URI for identifying "the current version" which is separate 
    from the URI identifying each particular version. In this case, a PUT request on a general URI might result in several other URIs being defined by the origin server.

    HTTP/1.1 does not define how a PUT method affects the state of an origin server.

    PUT requests MUST obey the message transmission requirements set out in section 8.2.

    Unless otherwise specified for a particular entity-header, the entity-headers in the PUT request SHOULD be applied to the resource created or modified by the PUT.

-   Differences between GET and POST

    GET - Requests data from a specified resource
    POST - Submits data to be processed to a specified resource

    1) GET example:

        Note that query strings (name/value pairs) is sent in the URL of a GET request:

        /test/demo_form.asp?name1=value1&name2=value2

        Some other notes on GET requests:

        GET requests can be cached
        GET requests remain in the browser history
        GET requests can be bookmarked
        GET requests should never be used when dealing with sensitive data
        GET requests have length restrictions
        GET requests should be used only to retrieve data

    2) POST example

    Note that query strings (name/value pairs) is sent in the HTTP message body of a POST request:

    POST /test/demo_form.asp HTTP/1.1
    Host: w3schools.com
    name1=value1&name2=value2

    Some other notes on POST requests:

    POST requests are never cached
    POST requests do not remain in the browser history
    POST requests cannot be bookmarked
    POST requests have no restrictions on data length

-   Table tags

    <tr> :  table row
    <td> :  define a table data cell. The text in <td> elements are regular and left-aligned by default.
    <th> :  define a table header cell. The text in <th> elements are bold and centered by default.

-   HTML <a> href Attribute

    The <a> defines a hyperlinke, which is used to link from one page to another.

    The most important attribute of the <a> element is the href attribute, which indicates the link's destination.

    By default, links will appear as follows in all browsers:

    An unvisited link is underlined and blue
    A visited link is underlined and purple
    An active link is underlined and red

    Example:

    The href attribute The href attribute specifies the link's destination:

    <a href="http://www.w3schools.com">Visit W3Schools</a>

-   div tag

    The <div> tag defines a division or a section in an HTML document.

    The <div> tag is used to group block-elements to format them with CSS.

    <div style="color:#0000FF">
      <h3>This is a heading</h3>
      <p>This is a paragraph.</p>
    </div>

-   CSS (Cascading Style Sheets)

    -   Basic

        CSS was introduced together with HTML 4, to provide a better way to style HTML elements.

        CSS can be added to HTML in the following ways:

        Inline - using the style attribute in HTML elements
        Internal - using the <style> element in the <head> section
        External - using an external CSS file

        The preferred way to add CSS to HTML, is to put CSS syntax in separate CSS files.

        CSS defines HOW HTML elements are to be displayed.

        Styles are normally saved in external .css files. External style sheets enable you to change the appearance and layout of all the pages in a Web site, 
        just by editing one single file!

    -   More basic

        -   Styles define how to display HTML elements
        -   Styles were added to HTML 4.0 to solve a problem
        -   External Style Sheets can save a lot of work
        -   External Style Sheets are stored in CSS files

    -   Syntax

        A CSS rule has two main parts: a selector, and one or more declarations(seperated by semi-colon):

        E.g.

        h1  {color:blue; font-size;12px;}
        
        h1:             ->      Selector
        color:blue      ->      Declaration(color is the property, and blue is the value)
        font-size:12px  ->      Another Declaration(font-size is the property and 12px is the value)

    -   In addition to setting a style for a HTML element, CSS allows you to specify your own selectors called "id" and "class".

        1) The id Selector

        The id selector is used to specify a style for a single, unique element.

        E.g.

        #para1
        {
            text-align:center;
            color:red;
        }

        <!DOCTYPE html>
        <html>
        <head>
        <style>
        #para1
        {
        text-align:center;
        color:red;
        } 
        </style>
        </head>

        <body>
        <p id="para1">Hello World!</p>
        <p>This paragraph is not affected by the style.</p>
        </body>
        </html>
    
        2) The class Selector

        The class selector is used to specify a style for a group of elements. Unlike the id selector the class selector is most often used on several elements.

        This allows you to set a particular style for many HTML elements with the same class. The class selector uses the HTML class attribute, and is defined with a "."

        In the example below, all HTML elements with class="center" will be center-aligned:

        e.g.

        .center {text-align:center;}

        usage:

        <!DOCTYPE html>
        <html>
        <head>
        <style>
        .center
        {
        text-align:center;
        }
        </style>
        </head>

        <body>
        <h1 class="center">Center-aligned heading</h1>
        <p class="center">Center-aligned paragraph.</p> 
        </body>
        </html>

    -   Three Ways to insert CSS

        -   External style sheet
        -   Internal style sheet
        -   Inline style

        1) External style sheet

           An external style sheet is ideal when the style is applied to many pages. With an external style sheet, you can change the look of an entire 
           Web site by changing one file. Each page must link to the style sheet using the <link> tag. The <link> tag goes inside the head section:

           <head>
           <link rel="stylesheet" type="text/css" href="mystyle.css">
           </head>
            
           An external style sheet can be written in any text editor. The file should not contain any html tags. Your style sheet should be saved with 
           a .css extension. An example of a style sheet file is shown below:

           hr {color:sienna;}
           p {margin-left:20px;}
           body {background-image:url("images/background.gif");}

           Note: Do not add a space between the property value and the unit (such as margin-left:20 px). The correct way is: margin-left:20px

        2) Internal Style Sheet

           An internal style sheet should be used when a single document has a unique style. You define internal styles in the head section of an HTML 
           page, by using the <style> tag, like this:

           <head>
           <style>
           hr {color:sienna;}
           p {margin-left:20px;}
           body {background-image:url("images/background.gif");}
           </style>
           </head>

        3) Inline style

    -   Accept request-header

        The Accept request-header field can be used to specify certain media types which are acceptable for the response. Accept headers can be used to indicate that 
        the request is specifically limited to a small set of desired types, as in the case of a request for an in-line image.
