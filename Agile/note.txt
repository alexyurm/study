-  Nokia standards:

   -  A Scrum team must have a Product Owner and know who that person is.
   -  The Product Owner must have a Product Backlog with estimates created
      by the team.
   -  The team must have a Burndown Chart and know their velocity.
   -  There must be no one outside a team interfering with the team during
      Sprint.

Chapter 1 Intro

   -  In Ken Schwaber's words, Scrum is not a methodology, it is a framework.
      It means that Scrum is not really going to tell you exactly what to do.

   -  The strength and pain of Scrum is that you are forced to adapt it to
      your specific situation.

Chapter 2 How we do product backlogs

   -  The product backlog is the heart of Scrum. This is where it all starts. The
      Product backlog is basically a prioritized list of requirements, or stores,
      or features, or whatevers. One example:

      -  ID: a unique identification
      -  Name: a short descriptive name of the story.
      -  Importance: the product owner's importance rating for this story. For example 10, or 150. High=Important.
      -  Initial estimate: the team's initial assessment of how much work is needed to implement this story compared
                           to other stories. Example: "If 3 guys locked into a room(with foods ofcourse) it will take
                           approximately 4 days" then the initial estimate is 12 story points. The important point is
                           this is only estimate, please don't get the absolute estimates correct.
      -  How to demo:   a high-level description of how this story will be demonstrated at the sprint demo. This is essentially
                        a simple test spec. If you practice TDD(test-driven development), this description can be used as pseudo-
                        code for your acceptance test code.

      Notes: any other info, clarifications, references to other sources of info, etc. Normally vary brief.

      Additional fields in the product backlog, mostly as a convinence for the product owner to help him sold out this priorities.

      -  Track: a rough categorization of this story. 
      -  Components: Usually realized as "checkboxes" in the Excel document, for example, "database, server".
      -  Requestor: the product owner may want to keep track of which customer or stockholder originally requested the item, in order to
                     give him feedback on the progress.
      -  Bug tracking ID: if you have a seperate bug tracking system, like we do with Jira, it is useful to keep track of any direct correspondence
                           between a story and one or more reported bugs.

Chapter 3 How we prepare for sprint planning

      -  Lesson: Make sure the product backlog is in shipshape before the sprint planning meeting. All it means is:

         -  The product backlog should exist!
         -  There should be one product backlog and one product owner (per product that is)
         -  All important items should have ratings assigned to them, different importance ratings.

            -  Actually,it is OK if lower-importance items all have the same value, since they probably won't be brought up during the sprint planning meeting anyway.
            -  any story that product owner believes has a remote possibility of being included in the next sprint should have a unique importance level(??).
            -  The importance rating is only used to sort the items by importance. So if item A has importance 20 and item B has importance 100, that simply means B
               is more important than A. It does not mean that B is five times more important than A. If B had importance rating 21 it will still mean the exact
               same thing!
            -  It is useful to leave gaps in the number sequence in case an item C comes up that is more important than A but less important than B. 

         -  The product owner should understand each story (normally he is the author, but in some cases other people add requests, which the product owner can prioritize)
            He does not need to know exactly what needs to be implemented, but he should understand why the story is there.

         Note: Other people than the product owner may add stories to the product backlog. But they may not assign importance level, that is product owner's sole right. 
               They may not add time estimates either, that is the team's sole right.

         Some agile process support tools: VersionOne, ScrumWorks, XPlanner. We haven't tried that.

Chapter 4 How we do sprint planning

      Sprint meeting is critical and a badly executed sprint planning meeting can mess up a whole sprint. The purpose of the sprint planning meetings is to give the team
      enough information to be able to work in undisturbed peace for a few weeks, and to give the product owner enough confidence to let them do so.

      The concrete output of the sprint planning meeting is:

      -  A sprint goal
      -  A list of team members (and their commitment level, if not 100%)
      -  A sprint backlog (= a list of stories included in the sprint)
      -  A defined sprint demo date.
      -  A defined time and place for the daily scrum.

   -  Why the product owner has to attend

      Because each story contains three variables that are highly dependant on each other.

                  Scope

      Estimate             Importance

      -  Scope and Importance are set by the product owner. Estimate is set by the team. Those three variables are fineturned continously through face-to-face dialog between the
         team and the product owner.

         -  First, the product owner starts the meeting by summarizing his goal for the sprint and the most important stories.
         -  Next, the team goes through and time-estimates each story, starting with the most important one. In some cases the time estimate for a story won't be what the product
            owner expected. This may prompt him to change the importance of the story. Or change the scope of the story, which in turn will cause the team to re-estimate, etc, etc.

      -  What if the product owner still cannot join the planning meeting. Try the following strategies in the given order:

         -  Persuade the owner to join and explain why the meeting is important;
         -  Try to get someone in the team to volunteer as product owner proxy during the meeting. Suggest the real owner synchronize with the proxy as much as possible. Suggest someone
            else if another volunteer is better fit.
         -  Try to convince the management team to assign a new product owner.
         -  Postpone the sprint launch until the product owner finds time to join. In the meantime, refuse to commit to any deliveries. Let the team spend each day doing whatever they
            feel is most important that day.

Chapter 5 Why quality is not negotiable

      -  The difference between internal quality and external quality

         External quality: it is what perceived by the users of the system. A slow and non-intuitive user interface is an example of poor external quality.
         Internal quality: it refers to issues that usually aren't visible to the user, but which have a profound effect on the maintainability of the system. Things like
                           system design consistency, test coverage, code readability. refactoring.

         A system with high internal quality can still have a low external quality. But a system with low internal quality will rarely have a high external quality.

         So, in some cases, it might make perfect bussiness sense to release a version of the system that has a clumsy and slow user interface, and then release a cleanup
         version later. Internal quality, however, it is not up for discussion(!!).

         Example: A product owner says "OK, guys, I respect your time estimate of 6 story points, but I am sure you can do some kind of quick-fix for this in half the time if you
                  just put your mind to it."

                  Aha! he is trying to use internal quality as a variable. How do I know? Because he wants us to reduce the estimate of the story without "paying the price" of reducing
                  the scope. The word "quick-fix" should trigger an alarm in your head...
   
         My experience is that sacrificing internal quality is almost always a terrible, terrible idea. The time saved is far outweighed by the cost in both short and long
         term. Once a code basis is permitted to start deteriorating it is very hard to put the quality back in later.

      -  Sprint planning meetings that drag on and on...

         The most difficult thing about sprint planning meetings is that:

         1) People don't think they will take so long time.
         2) ...but they do!

         What do we do? I brutally cut the meeting short. End it. Let the sprint suffer. The upside, however is that the team has learned a vary valuable lesson, and the next sprint
         planning meeting will be much more efficient. In addition, people will be less resistant when you propose a meeting length that they previously would have thought was too long.

      -  Sprint planning meeting agenda

         Sprint planning meeting 13:00-17:00

         -  13:00 - 13:30. Product owner goes through sprint goal and summarizes product backlog. Demo place, date and time is set.
         -  13:30 - 15:00. Team time-estimates, and breaks down item as necessary. Items are clarified. "How to demo" is filled in for all high-importance items.
         -  15:00 - 16:00. Team selects stories to be included in sprint. Do velocity calculations as a reality check.
         -  16:00 - 17:00. Select time and place for daily scrum(if different from last sprint). Further breakdown of stories into tasks.

         The schedule is not strictly enforced. The Scrum master may lengthen or shorten the sub-time-boxes as necessary as the meeting progresses.

      -  Defining the sprint length.

         One thing we have concluded is: do experiment with sprint lengths initially. Don't waste too much time analyzing, just select a decent length and give it a shot 
         for a sprint or two, then change the length. However, once you have decided what length you like best, stick to it for an extended period of time. For example, 3 weeks.

      -  Defining the sprint goal.

         The sprint goal should answer the fundamental question: "Why are we doing this sprint?" "Why don't we all just go on vacation instead?" In fact, one way
         to wheedle goal out of the product owner is to literally ask that question. Also, the goal should be something that has not already been achieved.

      -  Deciding with stories to include in the sprint

         More specifically, which stores from the product backlog to copy to the sprint backlog.

         Product Backlog              Sprint 1 backlog

         |-------------|              |-------------|              
         |             |              |             |
         |     A       |              |      A      |
         |             |              |             |
         |-------------|              |-------------|
         |     B       |              |      B      |
         |-------------|   ------>    |-------------|
         |     C       |              |      C      |
         |-------------|              |-------------|
         |     D       |            
         |             |         
         |-------------|          
         |     ...     |   
         |-------------|
         
         rectangle: each represents a story, sorted by importance. The importanct story is at the top of the list. The size of each rectangle represents the size of that story.
         The total size of the backlog represents the team's estimated velocity. i.e. how many story points the team believes they can complete during next sprint.

         The team decides how many stories to include in the sprint. Not the product owner or anybody else. This raises two questions:

         1. How can the product owner affect their decision?

            Let's answer the second question first

            The product owner is disappointed that story D won't be included in the sprint. What are his options during that sprint planning meeting?

            Option 1: reprioritize. Give story D the highest importance.
            Option 2: change the scope of story A.
            Option 3: split a story. If there are some aspects of story A that really aren't that important, so he splits A into two stories A1 and A2 with different importance levels.

         2. How does the team decide which stories to include in the sprint?

            We use two techniques for this:

            1. Gut feel

            Keep asking the team members how about to include A, B, C...? what is the confident to finish A, B, C...?
            
            2. Velocity calculations

            This technique involves two steps:

            1. Decide estimated velocity
            2. Calculate how many stores you can add without exceeding estimated velocity

            THIS SPRINT'S ESTIMATED VELOCITY:

            (AVAILABLE MAN-DAYS) x (FOCUS FACTOR) = (ESTIMATED VELOCITY)

            Focus factor is an estimate of how focused the team is. A low focus factor may mean that the team expects to have many disturbances or expects
            their own time estimates to be optimistic. The best way to determine a reasonable focus factor is to look at the last sprint(or even better, average the last 
            few sprints).

            LAST SPRINT'S FOCUS FACTOR:

            (FOCUS FACTOR)  =  (ACTUAL VELOCITY) / (AVAILABLE MAN-DAYS)

            Actual velocity is the sum of the initial estimates of all stories that were completed last sprint. For example, last sprint completed 18 story points using a
            3-person team consisting of Tom, Lisa and Sam working 3 weeks for a total of 45 man-days. To complicate things, a new guy Dave is joining the team for that
            sprint. Taking vacations and stuff into account we have 50 man-days next sprint.

            LAST SPRINT'S FOCUS FACTOR:               THIS SPRINT'S ESTIMATED VELOCITY:

            40%  = 18 STORY POINTS / 45 MAN-DAYS      50 MAN-DAYS x 40% = 20 STORY POINTS

            So, we have:

            Beginning of this sprint

            |-------------|     
            |             |   19 (8+5+3+3) story points included in sprint. The others couldn't fit into the sprint.
            |     8       |   
            |             |      
            |-------------|
            |     5       |
            |             |
            |-------------|
            |     3       |
            |-------------|
            |     3       |            
            |-------------|          
            |     4       |   
            |-------------|
            |     ...     |   
            |-------------|

            The history is useful but we still need to take into account for the following scenarios:

            -  If last sprint was an unusually bad sprint because most of the team was sick for a week, then it may be safe to assume that you won't be that unlucky again
               and you could estimate a higher focus factor next sprint.
            -  If the team has recently installed a new lighting-fast continuous build system you could probably increase focus factor due to that as well.
            -  If a new person is joining this sprint you need to decrease focus factor to take his training into account. What if the team is completely new so you don't have
               any statistics? Look at the focus factor of other teams under similar circumstances.
            -  The "default" focus factor I use for new teams is usually 70%, since that is where most of our other teams have ended up over time(WTF??).
            -  Etc.

            Which estimating technique do we use? Well we can use the velocity calculations first and Gut feel second by asking team member's opinions.

      -  Why we use index cards

         Most of the sprint meeting is spent dealing with stories in the product backlog. Estimating them, reprioritizing them, clarifying them, breaking them down, etc.

         How should we do this?

         the teams fire up the projector, show the Excel based backlog, and one guy (typically the product owner or Scrum master) would take the keyboard, mumble through each
         story and invite discussion. But this method sucks!

         A solution that works much better is to create index cards and put them up on the wall(or large table)

         <------ MORE IMPORTANT        LESS IMPORTANT ------>

         DEPOSIT MIGRATION_TOOL BACKOFFICE_LOGIN BACKOFFICE_USER_ADMIN WITHDRAW PERF_TEST ENCRYPTED PASSWD

         Why this is superior user interface compared to computer&projector. because:

         -  People stand up and walk around -> they stay awake and alert longer.
         -  Everybody feels more personally involved (rather than just the guy with the keyboard)
         -  Multiple stories can be edited simultaneously.
         -  Reprioritizing is trivial - just move the index cards around.
         -  After the meeting, the index cards can be carried right off to the team room and be used as a wall-based taskboard.

         You can either write them down by hand or (like we usually do) use a simple script to generate printable index cards directly from the product backlog.

         The Index card should look something like:
         
         Backlog item #55 

         Name: Deposit
         Notes: Need a UML sequence diagram. No need to worry about encryption for now.
         How to Demo: Log in, open deposit page, deposit $10, go to my balance page and check that it has increased by $10.
         Importance: 30
         Estimate

         Important: After the sprint planning meetings, the Scrum master manually updates the Excel-based product backlog with respect to any changes that were made
         to the physical story index cards. 

         Note that the "Importance" field. This is the importance as specified in the Excel-based product backlog at the time of printing. Having it on the card makes
         it easy to sort the cards physically by importance. Once the cards are up on the wall, you can ignore the importance rating and instead use the physical
         ordering on the wall to indicate relative importance ratings.

         Phisically, we do this by adding little post-it notes under each story, each post-it reflecting one task within that story.

         <------ MORE IMPORTANT        LESS IMPORTANT ------>

         9d       14d            5d                12d                  15d         12d      ...      ...
         DEPOSIT MIGRATION_TOOL BACKOFFICE_LOGIN BACKOFFICE_USER_ADMIN WITHDRAW PERF_TEST ENCRYPTED PASSWD

          |
          |
          |
          v
         Writing failing test 2d
         DAO   3d
         DB design   1d
         Integr test 2d
         Code cleanup 1d
         
         We don't update the Excel-based product backlog with respect to our task breakdowns for two reasons:

         -  The task breakdown is usually quite volatile, i.e. they are frequently changed and refined during the sprint. it is too much of a hassle to keep the product
            backlog Excel synchronized.

         -  The product owner doesn't need to be involved at this level of detail anyway.

      -  Definition of "done"

         We've come to realize that all stories cannot be treated the same. A story named "Query users form" will be treated very differently from a story named "Operations manual"
         If you run into confusion about the definition of done(which we did in the beginning) you should probably have a "definition of done" field on each individual story.

      -  Time estimating using planning poker

         Estimating is a team activity - every team member is usually involved in estimating every story. Why?

         -  At the time of planning, we normally don't know exactly who will be implementing which parts of which stories.
         -  Stories normally involve several people and different types of expertise(user interface design, coding, testing, etc.)
         -  In order to provide an estimate, a team member needs some kind of understanding of what the story is about. By asking everybody to estimate each item, we make sure
            that each team member understands what each item is about. This increases the likelihood that important questions about the story come up early.
         -  When asking everybody to estimate a story we often discover discrepancies where two different team members have wildly different estimates for the same story. That kind
            of stuff is better to discover and discuss earlier than later.

         If you ask the team to provide an estimate normally the person who understands the story best will be the first one to blurt one out. Unfortunately, this will strongly
         affect everybody else's estimates.

         There is an excellent technique to avoid this - it is called planning poker:

         0 1/2 1 2 3 5 8 13 20 40 100 ? Coffee cup

         -  Each team member gets a deck of 13 cards as shown above. Whenever a story is to be estimated, each team member selects a card that represents his time estimate (in story 
            points) and place it face-down on the table. When all team members are done the cards on the table are revealed simultanenously.

            If there is a large discrepancy between two estimates, the team discusses the differences and tries to build a common picture of what work is involved in the story. They
            might do some kind of of task breakdown. Afterwards, the team estimates again. The loop is repeated until the time estimates converge. 

            Remember that team members are to estimate the total amount of work involved in the story. Not just "their" part of the work. The tester should not just estimate the amount
            of testing work. 

            Why that the number sequence is non-linear. For example, there is nothing between 40 and 100. Why?

            This is to avoid false sense of accuracy for large time estimates. If a story is estimated at approximately 20 story points, it is not relevant to discuss whether it should
            be 20 or 18 or 21. All we know is that a large story and that it is hard to estimate. So 20 is our ballpark guess.

            Some special cards to note:

            -  0 = "this story is already done" or "this story is pretty much nothing, just a few minutes of work".
            -  ? = "I have absolutely no idea at all. None."
            -  Coffee Cup = "I am too tired to think. Let's take a short break."

      -  Clarifying stories

         How do you ensure that the product owner's understanding of a story matches the team's understanding? Or that each team members has the same understanding of each story? No
         you can't but there still some simple techniques for identifying the most blatant misunderstandings. The simplest technique is simply to make sure that all the fields are
         filled in for each story (or more specifically, for each story that has high enough importance to be considered for this sprint)

         I usually found that this simple description often uncovers important misunderstandings about the scope of a story. Good to discover them early, right?

      -  Breaking down stories into smaller stories

         Stories shouldn't be too big or too small (in terms of estimates). It is always possible to break a large story into smaller stories. Just make sure that the smaller stories
         still represent deliverables with bussiness value.

         We normally strive for stories weighted 2-8 man-days. Our velocity is usually around 40-60 for a typical team, so that gives us somewhere around 10 stories per sprint. 
         Sometimes (??is it true that each sprint consists of 3 weeks?) as few as 5 and sometimes as many as 15. That's a manageable number of index cards to deal with.

      -  Breaking down stories into tasks

         What is the difference between "tasks" and "stories"? A very valid question. The distinction is quite simple:

         Stories: things are deliverable stuff that the product owner cares about.
         Tasks:   things are non-deliverable stuff, or stuff that the product owner doesn't care about.

         Some interesting observations:

         -  New Scrum teams are reluntant to spending time breaking down a bunch of stories into tasks up-front like this.
         -  for clearly understood stories, it is just as easy to do this breakdown up-front as it is to do later.
         -  This type of breakdown often reveals additional work that causes the time estimate to go up, and thereby gives a more realistic sprint plan.
         -  This type of breakdown up-front makes daily scrum meetings noticeably more efficient.
         -  Even if the breakdown is inaccurate and will change once work starts, the above advantages sill apply.

      -  Defining time and place for the daily scrum.

         I Prefer morning meetings.

         Disadvantage of afternoon scrums: when you come to work in the morning, you have to try to remember what you told people yesterday about what you will be doing today.
         Disadvantage of morning scrumts: when you come to work in the morning, you have to try to remember what you did yesterday so that you can report this.

      -  Where to draw the line:

         I use the following priority list:

         Priority 1: A sprint goal and demo date.
         Priority 2: List of which stories and the team has accepted for this sprint.
         Priority 3: Estimate filled in for each story in sprint.
         Priority 4: "How to demo" filled in for each story in sprint.
         Priority 5: Velocity & resource calculations, as a reality check for your sprint team plan. Includes list of team members and their commitments(otherwise you can't calculate
                     velocity)
         Priority 6: Specified time and place for daily scrum. It only takes a moment to decide, but if you run out of time the Scrum master can simply decide this after the meeting
                     and email everyone.
         Priority 7: Stories broken down into tasks. This breakdown can instead be done on a daily basis in conjunction with daily scrums, but will slightly discupt the flow of the
                     sprint.

      -  Non-functional items

         Example: Upgrade the build script, Upgrade Jira...

         How to handle those stories? 
         
         1) Try to avoid tech stories. Look hard for a way to transform a tech story into a normal story with measurable bussiness value. That way the product owner has a better chance
            to make correct tradeoffs.

         2) If we can't transform a tech story into a normal story, see if the work could be done as a task within another story. For example, "refactor the DAO layer" could be a task
            within the story "edit user", since that involves the DAO layer.

         3) If both of the above fail, define it as a tech story, and keep a seperate list of such stories. Let the product owner see it but not edit it. Use the "focus facotr" and "es-
            timated velocity" parameters to negotiate with the product owner and bent out some time in the sprint to implement tech stories.

         If the product owner is a competent and reasonable fellow I suggest keeping him as informed as possible and letting him make the overall priorities. Transparency is one of the
         core values of Scrum.

      -  Bug tracking system vs. product backlog

         We use Jira to do bug tracking system. So how do we bring Jira issues into the sprint planning meeting? We've tried several strategies:

         1) Product owner prints out the most high priority Jira items, brings them to the sprint planning meeting, and puts them up on the wall together with the other stories
            (thereby implicitly specifying the priority of these items compared to the other stories)

         2) Product owner creates stories that refer to Jira items. For example "Fix the most critical back office reporting bugs, Jira-124, Jira-126 and Jira-180".
      
         3) Bug-fixing is considered to be outside of the sprint, i.e. the team keeps a low enough focus factor(for example 50%) to ensure that they have time to fix bugs. It is then
            simply assumed that the team will spend a certain amount of time each sprint fixing Jira-reported bugs.

         4) Put the product backlog in Jira (i.e. ditch Excel). Treat bugs just like any other story.

         ?? How about the new feature implementations? Should we treat them the same as we do to bugs?
         

         
