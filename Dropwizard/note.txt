-  The dropwizard-core module provides you with everything you'll need for most of your services;

   Jetty, a high-performance HTTP server.
   Jersey, a full-featured RESTful web framework.
   Jackson, the best JSON library for the JVM.
   Metrics, Yammer’s own library for application metrics.
   Guava, Google’s excellent utility library.
   Logback, the successor to Log4j, Java’s most widely-used logging framework.
   Hibernate Validator, the reference implementation of the Java Bean Validation standard.

Questions:

   1. In dropwizard core tutorial: http://dropwizard.codahale.com/manual/core/

   Where is the definition of the class "NotificationStore" ??

   2. JSON(Java Script Object Notification)

   JSON is a text format that is completely language independant. 

   - JSON is built on two structures:

   1) A collection of name/value pairs. In various languages, this is realized as an object, record, struct, dictionary, hash table, keyed list, or associative array.
   2) An ordered list of values. In most languages, this is realized as an array, vector, list, or sequence.

   - object

   Format:

   {}
   { members }

   Description:

   An object is an unordered set of name/value pairs. An object begins with { (left brace) and ends with } (right brace). Each name is followed by : (colon) and the 
   name/value pairs are separated by , (comma).

   - array

   Format: 

   []
   [ elements ]
      
   Description:

   An array is an ordered collection of values. An array begins with [ (left bracket) and ends with ] (right bracket). Values are separated by , (comma).

   - value

   Format:

   value
   string
   number
   object
   array
   true
   false
   null

   Description:

   A value can be a string in double quotes, or a number, or true or false or null, or an object or an array. These structures can be nested(??). 

    string
        ""
        " chars "

    chars
        char
        char chars

    char
        any-Unicode-character-
            except-"-or-\-or-
            control-character
        \"
        \\
        \/
        \b
        \f
        \n
        \r
        \t
        \u four-hex-digits

        Note: 

        \"  :   quotation mark
        \\  :   reverse solidus
        \/  :   solidus
        \b  :   backspace
        \f  :   formfeed
        \n  :   newline
        \r  :   carriage return
        \t  :   horizontal tab
        \u four-hex-digits  :  4 hexadecimal digits

    number
        int
        int frac
        int exp
        int frac exp

    int
        digit
        digit1-9 digits 
        - digit
        - digit1-9 digits

    frac
        . digits

    exp
        e digits

    digits
        digit
        digit digits

    e
        e
        e+
        e-
        E
        E+
        E-
   
   -   Examples:

   
        curl -i http://172.22.0.76/service/network_manager/status
        HTTP/1.1 200 OK
        Cache-Control: private, max-age=0
        Content-Type: application/json; charset=UTF-8
        Content-Length: 204
        Date: Thu, 27 Feb 2014 19:02:25 GMT
        Server: lighttpd/1.4.32

        {
            "data":
            [
                {
                    "interface": "eth0",
                    "type": "Ethernet",
                    "ip": "172.22.0.76",
                    "sub_net": "255.255.252.0",
                    "gateway": "172.22.0.1",
                    "domain": "",
                    "mac": "00:10:18:ac:23:38"
                }
            ]
        }

        - There is one object in the JSON and it's named "data".
        - The object "data" is an array
        - The array of "data" has only one object and that object has 7 pairs of name/values: "interface": "eth0", "type": "Ethernet"...

    -   Restful

        REST: Representational State Transfer is a software architectural style consisting of a coordinated set of architectural constraints applied
        to components, connectors, and data elements, within a hypermedia system(Hypermedia, an extension of the term hypertext, is a nonlinear medium of information 
        which includes graphics, audio, video, plain text and hyperlinks). REST ignores the details of component implementation and protocol syntax in order to focus 
        on the roles of components, the constraints upon their interaction with other components, and their interpretation of significant data elements.

        The REST architectural style is also applied to the development of web services[6] as an alternative to other distributed-computing specifications such as SOAP.

        One can characterise application conforming to the REST constraints described in this section as "RESTful"

        A software architecture is defined by a configuration of components, connectors, and data constrained in their relationships in order to achieve a desired set 
        of architectural properties.

        -   Components

            A component is an abstract unit of software instructions and internal state that provides a transformation of data via its interface.

        -   Connectors

            A connector is an abstract mechanism that mediates communication, coordination, or cooperation among components.

        -   Data

            A datum is an element of information that is transferred from a component, or received by a component, via a connector.

        Architectural properties

        -   Performance - component interactions can be the dominant factor in user-perceived performance and network efficiency.

        -   Scalability to support large numbers of components and interactions among component Fielding describes REST's effect on scalability thus:

            REST's client–server separation of concerns simplifies component implementation, reduces the complexity of connector semantics, improves the effectiveness 
            of performance tuning, and increases the scalability of pure server components. Layered system constraints allow intermediaries—proxies, gateways, and 
            firewalls—to be introduced at various points in the communication without changing the interfaces between components, thus allowing them to assist in 
            communication translation or improve performance via large-scale, shared caching. REST enables intermediate processing by constraining messages to be 
            self-descriptive: interaction is stateless between requests, standard methods and media types are used to indicate semantics and exchange information, 
            and responses explicitly indicate cacheability.

        -   Cacheable

            As on the World Wide Web, clients can cache responses. Responses must therefore, implicitly or explicitly, define themselves as cacheable, or not, to 
            prevent clients reusing stale or inappropriate data in response to further requests. Well-managed caching partially or completely eliminates some 
            client–server interactions, further improving scalability and performance.

        -   Layered system

            A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Intermediary servers may 
            improve system scalability by enabling load-balancing and by providing shared caches. They may also enforce security policies.

        -   Code on demand(optional)

            Servers can temporarily extend or customize the functionality of a client by the transfer of executable code. Examples of this may include compiled 
            components such as Java applets and client-side scripts such as JavaScript. "Code on demand" is the only optional constraint of the REST architecture.

        -   Uniform interface

            The uniform interface constraint is fundamental to the design of any REST service.[13] The uniform interface simplifies and decouples the architecture, 
            which enables each part to evolve independently. The four guiding principles of this interface are:

            -   Identification of resources

                Individual resources are identified in requests, for example using URIs in web-based REST systems. The resources themselves are conceptually separate 
                from the representations that are returned to the client. For example, the server does not send its database, but rather, perhaps, some HTML, XML or JSON.

            -   Manipulation of resources through these representations

                When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource.

            -   Self-descriptive messages

                Each message includes enough information to describe how to process the message. For example, which parser to invoke may be specified by an Internet 
                media type (previously known as a MIME type). Responses also explicitly indicate their cacheability.

            -   Hypermedia as the engine of application state

                Clients make state transitions only through actions that are dynamically identified within hypermedia by the server (e.g., by hyperlinks within hypertext). 
                Except for simple fixed entry points to the application, a client does not assume that any particular action is available for any particular resources 
                beyond those described in representations previously received from the server.

Side notes:

   -    Curl command:

    -   HTML Scripting

        No need to explain WHAT HTML is...

        HTTP is plain ASCII text lines being sent by the client to a server to request a particular action, and then the server replies a few text lines before the 
        actual requested content is sent to the client.

        The client, curl, sends a http request. the request contains a method (like get, post, head etc), a number of request headers and sometimes a request body. the http 
        server responds with a status line (indicating if things went well), response headers and most often also a response body. the "body" part is the plain data you 
        requested, like the actual html or the image etc.

        -   See the protocols

            Using curl's option --verbose (-v as a short option) will display what kind of commands curl sends to the server, as well as a few other informational texts.

            --verbose is the single most useful option when it comes to debug or even understand the curl<->server interaction.

            Sometimes even --verbose is not enough. Then --trace and --trace-ascii offer even more details as they show EVERYTHING curl sends and receives. Use it like this:

             curl --trace-ascii debugdump.txt http://www.example.com/

        -   See the timing

            Many times you may wonder what exactly is taking all the time, or you just want to know the amount of milliseconds between two points in a transfer. For those, 
            and other similar situations, the --trace-time option is what you need. It'll prepend the time to each trace output line:

             curl --trace-ascii d.txt --trace-time http://example.com/

        -   Redirect the output

            Default is output the stdout. Redirect the output using -o or -O.

    -   URL

        The host name is usually resolved using DNS or your /etc/hosts file to an IP address and that's what curl will communicate with. Alternatively you specify the 
        IP address directly in the URL instead of a name.

        For development and other trying out situation, you can point out a different IP address for a host name than what would otherwise be used, by using 
        curl's --resolve option:

         curl --resolve www.example.org:80:127.0.0.1 http://www.example.org/

        -   Proxy and Port number

            The port number you specify in the URL is the number that the server uses to offer its services. Sometimes you may use a local proxy, and then you may need to 
            specify that proxy's port number separate on what curl needs to connect to locally. Like when using a HTTP proxy on port 4321:

             curl --proxy http://proxy.example.org:4321 http://remote.example.org/
    
        -   User name and password

            curl http://user:password@example.org/
            
            or

            curl -u user:password http://example.org/

    -   HTML forms

        Forms are the general way a web site can present a HTML page with fields for the user to enter data in, and then press some kind of 'OK' or 'submit' button to 
        get that data sent to the server. The server then typically uses the posted data to decide how to act. Like using the entered words to search in a database, 
        or to add the info in a bug track system, display the entered address on a map or using the info as a login-prompt verifying that the user is allowed to see what 
        it is about to see.

        Of course there has to be some kind of program in the server end to receive the data you send. You cannot just invent something out of the air.

       -    GET 

            A GET-form uses the method GET, as specified in HTML like:

            <form method="GET" action="junk.cgi">
             <input type=text name="birthyear">
             <input type=submit name=press value="OK">
            </form>

            In your favorite browser, this form will appear with a text box to fill in and a press-button labeled "OK". If you fill in '1905' and press the OK button, your browser 
            will then create a new URL to get for you. The URL will get "junk.cgi?birthyear=1905&press=OK" appended to the path part of the previous URL.

            If the original form was seen on the page "www.hotmail.com/when/birth.html", the second page you'll get will become 
            
            "www.hotmail.com/when/junk.cgi?birthyear=1905&press=OK"

            To make curl do the GET form post for you, just enter the expected created URL:

            curl "http://www.hotmail.com/when/junk.cgi?birthyear=1905&press=OK"

        -   POST

            The GET method makes all input field names get displayed in the URL field of your browser. That's generally a good thing when you want to be able to bookmark that 
            page with your given data, but it is an obvious disadvantage if you entered secret information in one of the fields or if there are a large amount of fields 
            creating a very long and unreadable URL.

            The HTTP protocol then offers the POST method. This way the client sends the data separated from the URL and thus you won't see any of it in the URL address field.

            And to use curl to post this form with the same data filled in as before, we could do it like:

            curl --data "birthyear=1905&press=%20OK%20"  http://www.example.com/when.cgi

            This kind of POST will use the Content-Type application/x-www-form-urlencoded and is the most widely used POST kind.

            The data you send to the server MUST already be properly encoded, curl will not do that for you. For example, if you want the data to contain a space, you need to 
            replace that space with %20 etc. Failing to comply with this will most likely cause your data to be received wrongly and messed up.

            Recent curl versions can in fact url-encode POST data for you, like this:

            curl --data-urlencode "name=I am Daniel" http://www.example.com

            -   File Upload POST

                <form method="POST" enctype='multipart/form-data' action="upload.cgi">
                 <input type=file name=upload>
                 <input type=submit name=press value="OK">
                </form>

                This clearly shows that the Content-Type about to be sent is multipart/form-data.

                To post to a form like this with curl, you enter a command line like:

                curl --form upload=@localfilename --form press=OK [URL]

            -   Hidden Fields

                A similar example form with one visible field, one hidden field and one submit button could look like:

                A very common way for HTML based application to pass state information between pages is to add hidden fields to the forms. Hidden fields are already filled 
                in, they aren't displayed to the user and they get passed along just as all the other fields.

                <form method="POST" action="foobar.cgi">
                 <input type=text name="birthyear">
                 <input type=hidden name="person" value="daniel">
                 <input type=submit name="press" value="OK">
                </form>

                To post this with curl, you won't have to think about if the fields are hidden or not. To curl they're all the same:

                curl --data "birthyear=1905&press=OK&person=daniel" [URL]

            -   Figuring Out What A POST Looks like

                When you're about fill in a form and send to a server by using curl instead of a browser, you're of course very interested in sending a POST exactly the 
                way your browser does.

                An easy way to get to see this, is to save the HTML page with the form on your local disk, modify the 'method' to a GET, and press the submit button (you 
                could also change the action URL if you want to).

                You will then clearly see the data get appended to the URL, separated with a '?'-letter as GET forms are supposed to.

        -   HTTP UPLOAD

            -   PUT

                The perhaps best way to upload data to a HTTP server is to use PUT. Then again, this of course requires that someone put a program or script on the server end 
                that knows how to receive a HTTP PUT stream.

                Put a file to a HTTP server with curl:

                 curl --upload-file uploadfile http://www.example.com/receive.cgi

        -   HTTP Authentication

            To tell curl to use a user and password for authentication:

             curl --user name:password http://www.example.com

    -   

    -   Curl command options

        -i, --include

            (HTTP) Include the HTTP-header in the output. The HTTP-header includes things like server-name, date of the document, HTTP-version and more...

        -d, --data <data>

            (HTTP) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and 
            presses the submit button. This will cause curl to pass the data to the server using the content-type application/x-www-form-urlencoded. Compare to -F, --form.

            -d, --data is the same as --data-ascii. To post data purely binary, you should instead use the --data-binary option. To URL-encode the value of a form field you 
            may use --data-urlencode.

            If any of these options is used more than once on the same command line, the data pieces specified will be merged together with a separating &-symbol. Thus, 
            using '-d name=daniel -d skill=lousy' would generate a post chunk that looks like 'name=daniel&skill=lousy'.

            If you start the data with the letter @, the rest should be a file name to read the data from, or - if you want curl to read the data from stdin. Multiple files 
            can also be specified. Posting data from a file named 'foobar' would thus be done with --data @foobar. When --data is told to read from a file like that, 
            carriage returns and newlines will be stripped out.

            
